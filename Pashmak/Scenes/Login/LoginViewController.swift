//
//  LoginViewController.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 8/21/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Hero
import Material
import KVNProgress

private struct Constants {
  static let hiddenErrorTransform = CGAffineTransform(translationX: 0, y: -20.0)
}

protocol LoginDisplayLogic: class {
  func displayVerify(viewModel: Login.Verify.ViewModel)

  func displayAuthenticateLoading(viewModel: Login.Authenticate.ViewModel.Loading)
  func displayAuthenticateFailed(viewModel: Login.Authenticate.ViewModel.Failed)
  func displayAuthenticateSuccess(viewModel: Login.Authenticate.ViewModel.Success)

}

class LoginViewController: UIViewController {
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  private var numberOfShake = 0

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle

  var phoneNumber: String {
    return self.userNameTextField.text ?? ""
  }

  var password: String {
    return self.passwordTextField.text ?? ""
  }

  @IBOutlet weak var userNameTextField: TextField!
  @IBOutlet weak var passwordTextField: TextField!
  @IBOutlet weak var errorLabel: UILabel!
  @IBOutlet weak var nextButton: Button!
  @IBAction func nextButtonTapped(_ sender: Any) {
    self.login()
  }

  override func viewDidLoad() {
    super.viewDidLoad()
    prepareUI()
  }

  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    preparePush()
  }

  private func prepareUI() {
    self.hero.isEnabled = true
    prepareErrorLabel()
    prepareTextFields()
    prepareNextButton()
  }

  private func prepareErrorLabel() {
    self.errorLabel.transform = Constants.hiddenErrorTransform
    self.errorLabel.alpha = 0.0
  }
  private func prepareTextFields() {
    func format(_ textField: TextField, placeHolder: String) {
      textField.tintColor = UIColor.Pashmak.Orange

      textField.placeholderLabel.text = placeHolder
      textField.placeholderLabel.font = UIFont.farsiFont(.light, size: 18.0)
      textField.placeholderLabel.textColor = UIColor.Pashmak.TextDeactive
      textField.textAlignment = .center

      textField.font = UIFont.farsiFont(.bold, size: 18.0)
      textField.textColor = UIColor.Pashmak.Orange

      textField.dividerActiveHeight = 2.0
      textField.dividerNormalHeight = 1.0

      textField.dividerActiveColor = UIColor.Pashmak.Orange
      textField.dividerNormalColor = UIColor.Pashmak.NormalDivider

      textField.placeholderAnimation = .hidden
      textField.addTarget(self, action: #selector(self.verify), for: .editingChanged)
      textField.backgroundColor = UIColor.Pashmak.Grey
      textField.delegate = self
    }

    format(self.userNameTextField, placeHolder: "شماره تلفن همراه")
    format(self.passwordTextField, placeHolder: "کد ملی")

  }

  private func prepareNextButton() {
    guard let btn = self.nextButton else { return }
    btn.pulseColor = .white
    btn.isEnabled = false
    let layer = btn.layer

    layer.cornerRadius = 22.0

  }

  private func preparePush() {
//    print("Current Token: [\(Settings.current.pushToken)]")
    (UIApplication.shared.delegate as? AppDelegate)?.preparePush()
  }

  private func updateNextButton(_ isValid: Bool) {
    guard let btn = self.nextButton else { return }
    btn.isEnabled = isValid
    btn.backgroundColor = isValid ? UIColor.Pashmak.buttonActive : UIColor.Pashmak.Timberwolf
    btn.setTitleColor(isValid ?  UIColor.white : UIColor.Pashmak.TextDeactive, for: [])
  }

  @objc
  private func verify() {
    let phone = self.phoneNumber
    let password = self.password
    let request = Login.Verify.Request(phone: phone, nationalID: password)
    interactor?.verify(request: request)
  }

  private func login() {

    let username = self.phoneNumber
    let password = self.password

    let request = Login.Authenticate.Request.init(userName: username, password: password)
    interactor?.login(request: request)

  }

  fileprivate func shakePhoneField() {
    guard let field = self.userNameTextField else { return }
    numberOfShake += 1
    field.shake()
    if numberOfShake >= 3 {
      showFieldError()
    }
  }

  fileprivate func showFieldError() {
    UIView.animate(withDuration: 0.25, delay: 0.0, usingSpringWithDamping: 0.65, initialSpringVelocity: 0.0, options: [], animations: { [weak self] in
      guard let self = self else { return }
      self.errorLabel.transform = .identity
      self.errorLabel.alpha = 1.0
      }, completion: nil)
  }

  fileprivate func hideFieldError() {

    UIView.animate(withDuration: 0.2, animations: { [weak self] in
      guard let self = self else { return }
      self.errorLabel.transform = Constants.hiddenErrorTransform
      self.errorLabel.alpha = 0.0
    })

  }
}

extension LoginViewController: LoginDisplayLogic {
  func displayVerify(viewModel: Login.Verify.ViewModel) {
    let phoneIsValid = viewModel.phoneIsValid
    let nationalIDIsValid = viewModel.nationalIdIsValid

    let formIsValid = phoneIsValid && nationalIDIsValid
   updateNextButton(formIsValid)

    if phoneIsValid {
      if userNameTextField.isFirstResponder {
        _ = passwordTextField.becomeFirstResponder()
      }
    }

    if formIsValid {
      self.view.endEditing(true)
    }

  }

  func displayAuthenticateLoading(viewModel: Login.Authenticate.ViewModel.Loading) {
    let message = viewModel.message
    KVNProgress.show(withStatus: message)
  }

  func displayAuthenticateFailed(viewModel: Login.Authenticate.ViewModel.Failed) {
    let message = viewModel.message
    KVNProgress.showError(withStatus: message)
  }

  func displayAuthenticateSuccess(viewModel: Login.Authenticate.ViewModel.Success) {
    let message = viewModel.message
    KVNProgress.showSuccess(withStatus: message) { [weak self] in
      guard let self = self else { return }
      self.router?.routeToHome(segue: nil)
    }
  }
}

extension LoginViewController: UITextFieldDelegate {

  func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
    guard string.count > 0 else { return true }

    if textField === self.userNameTextField {

      let currentText = textField.text ?? ""
      if currentText.count == 0 {
        if string != "0" {
          self.shakePhoneField()
          return false
        } else {
          self.hideFieldError()
        }

      } else if currentText.count == 1 {

        if string != "9" {
          self.shakePhoneField()
          return false
        } else {
          self.hideFieldError()
        }

      } else {
        numberOfShake = 0
      }
      return 11 > (textField.text ?? "").count
    }

    return true
  }

}
