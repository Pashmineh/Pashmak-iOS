//
//  SplashViewController.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 8/21/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Async
import Hero
import UIKit

protocol SplashDisplayLogic: AnyObject {
  func displayGoNext(viewModel: Splash.GoNext.ViewModel)
}

class SplashViewController: UIViewController {
  var interactor: SplashBusinessLogic?
  var router: (NSObjectProtocol & SplashRoutingLogic & SplashDataPassing)?

  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = SplashInteractor()
    let presenter = SplashPresenter()
    let router = SplashRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle
  @IBOutlet private weak var attributionLabel: UILabel!

  override func viewDidLoad() {
    super.viewDidLoad()
    prepareUI()
  }

  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    showAttribution()
  }

  private func prepareUI() {
   self.hero.isEnabled = true
    prepareAttribution()
  }

  private func prepareAttribution() {
    guard let label = attributionLabel else {
        return
      }
    label.alpha = 0
    label.transform = CGAffineTransform(translationX: 0, y: 12.0)
  }

  private func showAttribution() {
    guard let label = attributionLabel else {
        return
      }
    UIView.animate(withDuration: 0.3,
                   delay: 0.5,
                   options: [],
                   animations: { [weak label] in

      label?.alpha = 1.0
      label?.transform = .identity

    }) { _ in
      Async.main(after: 1.0) {[weak self] in
        guard let self = self else {
        return
      }
        self.goNext()

      }
    }
  }

  private func goNext() {
    let request = Splash.GoNext.Request()
    interactor?.goNext(request: request)
  }

}

extension SplashViewController: SplashDisplayLogic {
  func displayGoNext(viewModel: Splash.GoNext.ViewModel) {
    let destination = viewModel.destination
    switch destination {
    case .login:
      self.router?.routeToLogin(segue: nil)
    case .home:
      self.router?.routeToHome(segue: nil)
    }
  }
}
