//
//  LoginPresenter.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 8/21/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginPresentationLogic {
  func presentVerify(response: Login.Verify.Response)
  func presentAuthenticate(response: Login.Authenticate.Response)
}

class LoginPresenter: LoginPresentationLogic {
  weak var viewController: LoginDisplayLogic?
  func presentVerify(response: Login.Verify.Response) {
    let phoneIsValid = response.phoneIsValid
    let idIsValid = response.nationalIdIsValid

    let viewModel = Login.Verify.ViewModel(phoneIsValid: phoneIsValid, nationalIdIsValid: idIsValid)
    viewController?.displayVerify(viewModel: viewModel)
  }

  func presentAuthenticate(response: Login.Authenticate.Response) {

    let state = response.state

    switch state {
    case .loading:
      let message = Messages.Loading.messages.randomElement() ?? ""
      let viewModel = Login.Authenticate.ViewModel.Loading.init(message: message)
      viewController?.displayAuthenticateLoading(viewModel: viewModel)
    case .failure(let error):
      var message = "Ù†Ø´Ø¯ Ú©Ù‡ Ø¨Ø´Ù‡!"
      if case APIError.invalidParameters(_) = error {
        message = "Ù†Ø§Ù… Ú©Ø§Ø±Ø¨Ø±ÛŒ Ùˆ Ù¾Ø³ÙˆØ±Ø¯ Ø±Ùˆ Ø§Ø´ØªØ¨Ø§Ù‡ Ø²Ø¯ÛŒ Ú©Ù‡!"
      } else if case APIError.invalidResponseCode(let statusCode) = error {
        if statusCode == 401 {
          message = "Ù…Ø´Ú©ÙˆÚ© Ø¨Ù‡ Ù†Ø¸Ø± Ù…ÛŒØ±Ø³ÛŒ ðŸ¤¨ðŸ¤¨ðŸ¤¨\n Ø§ÛŒÙ† Ø´Ù…Ø§Ø±Ù‡ Ùˆ Ø±Ù…Ø²ÛŒ Ú©Ù‡ Ø¯Ø§Ø¯ÛŒ ØºÙ„Ø· Ø§Ø² Ø¢Ø¨ Ø¯Ø± Ø§ÙˆÙ…Ø¯!"
        } else {
          message = Messages.ServerErrors.messages.randomElement() ?? message
          message += "\n(\(statusCode))"
        }

      }

      let viewModel = Login.Authenticate.ViewModel.Failed.init(message: message)
      viewController?.displayAuthenticateFailed(viewModel: viewModel)

    case .success(let response):
      let firstName = response.name ?? ""
      let lastName = response.lastName ?? ""

      var fullName = ""
      if !firstName.isEmpty {
        fullName += firstName
      }

      if !lastName.isEmpty {
        fullName += " \(lastName)"
      }
      let message = "\(fullName) Ø®ÙˆØ´ Ø§ÙˆÙ…Ø¯ÛŒ!"

      let viewModel = Login.Authenticate.ViewModel.Success.init(message: message)
      viewController?.displayAuthenticateSuccess(viewModel: viewModel)

    }

  }

}
