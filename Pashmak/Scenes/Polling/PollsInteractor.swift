//
//  PollsInteractor.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 9/17/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Async
import UIKit

protocol PollsBusinessLogic {
  func populate(request: Polls.Populate.Request)
  func vote(request: Polls.Vote.Request)
}

protocol PollsDataStore {
  var polItems: [ServerModels.Poll.PollItem] { get set }
}

class PollsInteractor: PollsBusinessLogic, PollsDataStore {
  var presenter: PollsPresentationLogic?
  var polItems: [ServerModels.Poll.PollItem] = []

  func populate(request: Polls.Populate.Request) {
    func sendLoading() {
      let response = Polls.Populate.Response(state: .loading)
      presenter?.presentPopulate(response: response)
    }

    func sendFailed(_ error: Error) {
      let response = Polls.Populate.Response(state: .failure(error))
      presenter?.presentPopulate(response: response)
    }

    sendLoading()

    PashmakServer.perform(request: ServerRequest.Polls.getPolls())
      .done { [weak self] (result: ServerData<[ServerModels.Poll.PollItem]>) in
        guard let self = self else {
          return
        }
        let polls = result.model
        Async.main(after: 0.5) {
          let response = Polls.Populate.Response(state: .success(polls))
          self.presenter?.presentPopulate(response: response)
        }
      }
      .catch { error in
        sendFailed(error)
      }

  }

  func vote(request: Polls.Vote.Request) {

    let poll = request.poll
    let item = request.item
    let isUnvote = request.isUnvote

    func sendLoading() {
      let response = Polls.Vote.Response(state: .loading)
      presenter?.presentVote(response: response)
    }

    func sendFailure(_ error: Error) {
      Async.main(after: 1.0) {
        let response = Polls.Vote.Response(state: .failure(error))
        item.isSubmitting = false
        self.presenter?.presentVote(response: response)
      }
    }

    guard poll.canVote || isUnvote else {
      Log.warning("Cannot vote at the moment.")
      return
    }

    item.isSubmitting = true
    sendLoading()

    let vote = ServerModels.Poll.Vote(pollID: poll.id, itemID: item.id)
    PashmakServer.perform(request: ServerRequest.Polls.vote(vote, isUnvote: isUnvote), validResponseCodes: [200, 201])
      .done { [weak self] (result: ServerData<[ServerModels.Poll.PollItem]>) in
        _ = result
        guard let self = self else {
          return
        }
        item.voted = !isUnvote
        item.isSubmitting = false
        let response = Polls.Vote.Response(state: Polls.Vote.VoteSubmitState.success(poll))
        self.presenter?.presentVote(response: response)
      }
      .catch { error in
        sendFailure(error)
      }

  }

}
