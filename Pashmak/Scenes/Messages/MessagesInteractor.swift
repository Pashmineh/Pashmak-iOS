//
//  MessagesInteractor.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 9/16/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MessagesBusinessLogic {
  func populate(request: Messages.Populate.Request)
}

protocol MessagesDataStore {

}

class MessagesInteractor: MessagesBusinessLogic, MessagesDataStore {
  var presenter: MessagesPresentationLogic?

  func populate(request: Messages.Populate.Request) {
    func sendLoading() {
      let response = Messages.Populate.Response(state: .loading)
      presenter?.presentPopulate(response: response)
    }

    func sendFailed(error: Error) {
      let response = Messages.Populate.Response(state: .failure(error))
      presenter?.presentPopulate(response: response)
    }

    sendLoading()

    PashmakServer.perform(request: ServerRequest.Messages.getMessages(), validResponseCodes: [200, 201])
      .done { (result: ServerData<[ServerModels.Messages.ListItem]>) in
        let messages = result.model
        let response = Messages.Populate.Response(state: .success(messages))
        self.presenter?.presentPopulate(response: response)
      }
      .catch { error in
        sendFailed(error: error)
      }

  }

}
