//
//  CheckinsPresenter.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 9/25/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CheckinsPresentationLogic {

  func presentPopulate(response: Checkins.Populate.Response)
  func presentCheckin(response: Checkins.Checkin.Response)
  func presentUpdateCheckinNeeded(response: Checkins.UpdateCheckinNeeded.Response)

}

class CheckinsPresenter: CheckinsPresentationLogic {
  weak var viewController: CheckinsDisplayLogic?

  func presentPopulate(response: Checkins.Populate.Response) {
    let state = response.state

    switch state {
    case .loading:
      var items: [ServerModels.Checkin.ListItem] = []
      let height = UIScreen.main.bounds.height - 100.0
      let numberofItems = Int((height / 70.0).rounded(FloatingPointRoundingRule.up))
      (0...numberofItems).forEach { _ in
        items.append(ServerModels.Checkin.ListItem())
      }
      let viewModel = Checkins.Populate.ViewModel.Loading(items: items)
      viewController?.displayPopulateLoading(viewModel: viewModel)
    case .failure(let error):
      var message = "خطا در عملیات!"
      if case APIError.invalidResponseCode(let statusCode) = error {
        message = Texts.ServerErrors.random + "\n(\(statusCode))"
      }
      let viewMdoel = Checkins.Populate.ViewModel.Failed(message: message)
      viewController?.displayPopulateFailed(viewModel: viewMdoel)
    case .success(let checkins):
      let items = checkins.sorted { $0.checkinDate > $1.checkinDate }
      let viewMdoel = Checkins.Populate.ViewModel.Success(items: items)
      viewController?.displayPopulateSuccess(viewModel: viewMdoel)
    }
  }

  func presentUpdateCheckinNeeded(response: Checkins.UpdateCheckinNeeded.Response) {
    let canCheckin = response.canCheckin
    let viewModel = Checkins.UpdateCheckinNeeded.ViewModel(canCheckin: canCheckin)
    viewController?.displayUpdateCheckinNeeded(viewModel: viewModel)
  }

  func presentCheckin(response: Checkins.Checkin.Response) {
    let state = response.state
    let isRanging = response.isRanging
    switch state {
    case .loading:
      let message = isRanging ? Texts.Ranging.random : Texts.Loading.random
      let viewModel = Checkins.Checkin.ViewModel.Loading(message: message)
      viewController?.displayCheckinLoading(viewModel: viewModel)
    case .failure(let error):

      var message = "خطا در عملیات!"
      if isRanging {
        message = Texts.RangingError.random
      } else {
        if case APIError.invalidPrecondition(let msg) = error {
          message = msg
        } else if case APIError.invalidResponseCode(let status) = error {
          message = Texts.ServerErrors.random + "\n(\(status))"
        }
      }

      let viewModel = Checkins.Checkin.ViewModel.Failed(message: message)
      viewController?.displayCheckinFailed(viewModel: viewModel)

    case .success(let message):
      let viewModel = Checkins.Checkin.ViewModel.Success(message: message)
      viewController?.displayCheckinSuccess(viewModel: viewModel)
    }
  }

}
