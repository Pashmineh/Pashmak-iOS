//
//  TransactionsViewController.swift
//  Pashmak
//
//  Created by Mohammad Porooshani on 9/26/18.
//  Copyright (c) 2018 Mohammad Porooshani. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Async
import BLTNBoard
import IGListKit
import KVNProgress
import Material
import UIKit
import VisualEffectView

protocol TransactionsDisplayLogic: AnyObject {
  func displayPopulateLoading(viewModel: Transactions.Populate.ViewModel.Loading)
  func displayPopulateFailed(viewModel: Transactions.Populate.ViewModel.Failed)
  func displayPopulateSuccess(viewModel: Transactions.Populate.ViewModel.Success)
}

class TransactionsViewController: UIViewController {
  var interactor: TransactionsBusinessLogic?
  var router: (NSObjectProtocol & TransactionsRoutingLogic & TransactionsDataPassing)?

  var displayedItems: [ListDiffable] = []
  // MARK: Object lifecycle

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }

  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }

  // MARK: Setup

  private func setup() {
    let viewController = self
    let interactor = TransactionsInteractor()
    let presenter = TransactionsPresenter()
    let router = TransactionsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  // MARK: Routing

  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

  // MARK: View lifecycle

  override var preferredStatusBarStyle: UIStatusBarStyle { return .lightContent }
  override var prefersStatusBarHidden: Bool { return false }

  let updater = ListAdapterUpdater()
  lazy var adapter: ListAdapter = {
    let adapter = ListAdapter(updater: self.updater, viewController: self, workingRangeSize: 5)
    return adapter
  }()

  lazy var refreshControl: UIRefreshControl = {
    let refCon = UIRefreshControl()
    refCon.addTarget(self, action: #selector(self.populate), for: .valueChanged)
    refCon.tintColor = #colorLiteral(red: 0.3725490196, green: 0.3725490196, blue: 0.3725490196, alpha: 1)
    return refCon
  }()

  lazy var bulletinDataSource: AddPaymentBulletinDataSource = {
    let dataSource = AddPaymentBulletinDataSource()

    return dataSource
  }()

  lazy var bulettinManager: BLTNItemManager = {
    let typeSelection = bulletinDataSource.makeTypeSelection()
    let manager = BLTNItemManager(rootItem: typeSelection)
    manager.cardCornerRadius = 16.0
    manager.backgroundColor = #colorLiteral(red: 0.9647058824, green: 0.9647058824, blue: 0.9647058824, alpha: 1)

    return manager
  }()

  lazy var addTransactionButton: Button = {
    let button = Button()
    button.setImage(UIImage(named: "addTransactionIcon"), for: [])
    button.pulseColor = .white
    button.pulseAnimation = .centerRadialBeyondBounds
    button.touchUp = { [weak self] in
      guard let self = self else {
        return
      }
      self.showAddTranssaction()

    }

    return button
  }()

  override func viewDidLoad() {
    super.viewDidLoad()
    prepareUI()
  }

  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    if self.displayedItems.isEmpty {
      self.populate()
    }
  }

  private func prepareUI() {
    prepareNavBar()
    prepareCollectionView()
  }

  private func prepareNavBar() {
    let navbar = self.navigationItem
    navbar.titleLabel.text = "تراکنش‌ها"
    navbar.titleLabel.textColor = .white
    navbar.rightViews = [self.addTransactionButton]
    navbar.titleLabel.font = UIFont.farsiFont(.bold, size: 16.0)
    self.navigationController?.navigationBar.tintColor = .white
    let blurView = VisualEffectView(effect: UIBlurEffect(style: UIBlurEffect.Style.regular))
    blurView.colorTint = #colorLiteral(red: 0.9607843137, green: 0.6509803922, blue: 0.137254902, alpha: 1)
    blurView.colorTintAlpha = 0.85
    blurView.blurRadius = 8.0
    blurView.scale = 2.0
    self.view.layout(blurView).top().left().right().height(64.0)

  }

  private func prepareCollectionView() {

    let layout = ListCollectionViewLayout(stickyHeaders: false, scrollDirection: UICollectionView.ScrollDirection.vertical, topContentInset: 0.0, stretchToEdge: false)
    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
    let topOffset: CGFloat = 8.0
    collectionView.backgroundColor = .clear
    collectionView.isScrollEnabled = true
    collectionView.scrollIndicatorInsets.top = topOffset
    collectionView.contentInset.top = topOffset
    //    collectionView.contentInset.bottom = 8.0
    collectionView.layer.setShadow(opacity: 0.15, radius: 8.0)
    collectionView.refreshControl = self.refreshControl
    adapter.collectionView = collectionView
    adapter.dataSource = self
    guard let containerView = self.view else {
      return
    }
    containerView.backgroundColor = #colorLiteral(red: 0.9490196078, green: 0.9490196078, blue: 0.9490196078, alpha: 1)
    collectionView.frame = containerView.bounds
    containerView.addSubview(collectionView)
    collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
    self.view.sendSubviewToBack(collectionView)

  }

  @objc
  func populate() {
    let request = Transactions.Populate.Request()
    interactor?.populate(request: request)
  }

  func showAddTranssaction() {
//    router?.routeToAddTransaction()
    let viewController = self.navigationController ?? self
    self.bulettinManager.showBulletin(above: viewController)
  }
}

extension TransactionsViewController: TransactionsDisplayLogic {
  func displayPopulateLoading(viewModel: Transactions.Populate.ViewModel.Loading) {
    if self.displayedItems.isEmpty {
      let items = viewModel.items
      self.displayedItems = items
      self.adapter.performUpdates(animated: true, completion: nil)
    }
  }

  func displayPopulateFailed(viewModel: Transactions.Populate.ViewModel.Failed) {
    self.refreshControl.endRefreshing()
    let message = viewModel.message
    KVNProgress.showError(withStatus: message)
  }

  func displayPopulateSuccess(viewModel: Transactions.Populate.ViewModel.Success) {
    self.refreshControl.endRefreshing()
    let items = viewModel.items
    self.displayedItems = items
    self.adapter.performUpdates(animated: true, completion: nil)
  }
}

extension TransactionsViewController: ListAdapterDataSource {
  func objects(for listAdapter: ListAdapter) -> [ListDiffable] {
    return self.displayedItems
  }

  func listAdapter(_ listAdapter: ListAdapter, sectionControllerFor object: Any) -> ListSectionController {
    switch object {
    case is ServerModels.Transactions.Item:
      return TransactionItemSectionController()
    default:
      fatalError("Unknown objetc for section controller: [\(object)]")
    }
  }

  func emptyView(for listAdapter: ListAdapter) -> UIView? {
    return nil
  }
}
